<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * 菜单模型
 *
 * @Auther Qasim
 * @date 2023/6/28
 */
class Menu extends Base
{
    use SoftDeletes;
    protected $fillable = [
        'id',
        'pid',
        'name',
        'path',
        'component',
        'route',
        'icon',
        'visible',
        'status',
        'sort',
        'deleted_at'
    ];

    protected $casts = [
      'visible' => 'boolean'
    ];

    protected static $scopes = [];

    protected static int $status = 1;

    protected static array $fields = ['id', 'pid', 'name', 'path', 'component', 'route', 'icon', 'visible', 'status', 'sort'];


    public static function boot(): void
    {

        parent::boot(); // TODO: Change the autogenerated stub

        // 当菜单被硬删除时，中间表也要删除
        static::deleting(function (Menu $model) {
            // forceDeleting 表示硬删除
            if ($model->forceDeleting) {

                $model->roles()->detach();
            }
        });
    }

    /**
     * 设置作用域
     *
     * @param array $scopes
     */
    public static function setScopes(array $scopes): void
    {
        self::$scopes = $scopes;
    }

    /**
     * 设置查询状态
     *
     * @param int $status
     */
    public static function setStatus(int $status): void
    {
        self::$status = $status;
    }

    /**
     * 设置查询字段
     *
     * @param array $fields
     */
    public static function setFields(array $fields): void
    {
        self::$fields = $fields;
    }

    /**
     * 定义与子菜单的关系
     *
     * @return HasMany
     */
    public function children(): HasMany
    {
        return $this->hasMany(Menu::class, 'pid', 'id')->scopes(self::$scopes);
    }

    /**
     * 顶级菜单
     *
     * @param Builder $query
     * @return Builder
     */
    public function scopeRoot(Builder $query): Builder
    {
        return $query->whereNull('pid');
    }

    /**
     * 菜单状态
     * @param Builder $query
     *
     * @return Builder
     */
    public function scopeStatus(Builder $query): Builder
    {
        return $query->where('status', self::$status);
    }

    /**
     * 查询字段
     *
     * @param Builder $query
     * @return Builder
     */
    public function scopeFields(Builder $query): Builder
    {
        return $query->select(self::$fields);
    }

    /**
     * 排序
     *
     * @param Builder $query
     * @param string $sort
     * @return Builder
     */
    public function scopeSort(Builder $query, string $sort = 'desc'): Builder
    {
        return $query->orderBy('sort', $sort);
    }

    /**
     * 嵌套菜单
     *
     * @return HasMany
     */
    public function allChildren(): HasMany
    {
        return $this->children()->with(['allChildren'])->scopes(self::$scopes);
    }

    /**
     * 处理pid
     * @param $value
     * @return int
     */
    public function getPidAttribute($value): int
    {
        return is_null($value) ? 0 : $value;
    }

    /**
     * 菜单角色
     * @return BelongsToMany
     */
    public function roles(): BelongsToMany
    {
        return $this->belongsToMany(Role::class, RoleMenu::class, 'menu_id', 'role_id');
    }
}
