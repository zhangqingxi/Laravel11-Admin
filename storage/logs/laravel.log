<template>
  <template v-if="getShow">
    <LoginFormTitle class="enter-x" />
    <Form class="p-4 enter-x" :model="formData" :rules="getFormRules" ref="formRef">
      <FormItem name="account" class="enter-x">
        <Input
          size="large"
          v-model:value="formData.account"
          :placeholder="t('sys.login.userName')"
        />
      </FormItem>

      <FormItem name="email" class="enter-x">
        <Input size="large" v-model:value="formData.email" :placeholder="t('sys.login.email')" />
      </FormItem>
      <FormItem name="code" class="enter-x">
        <CountdownInput
          size="large"
          v-model:value="formData.code"
          :placeholder="t('sys.login.emailCode')"
          :send-code-api="sendMail"
          :send-code-params="{
            email: formData.email,
            type: EmailType.RESET_PASSWORD,
          }"
        />
      </FormItem>

      <FormItem class="enter-x">
        <Button type="primary" size="large" block @click="handleReset" :loading="loading">
          {{ t('common.resetText') }}
        </Button>
        <Button size="large" block class="mt-4" @click="handleBackLogin">
          {{ t('sys.login.backSignIn') }}
        </Button>
      </FormItem>
    </Form>
  </template>
</template>
<script lang="ts" setup>
  // import { reactive, ref, computed, unref } from 'vue';
  // import LoginFormTitle from './LoginFormTitle.vue';
  // import { Form, Input, Button } from 'ant-design-vue';
  // import { CountdownInput } from '@/components/CountDown';
  // import { useI18n } from '@/hooks/web/useI18n';
  // import { useLoginState, useFormRules, LoginStateEnum, useFormValid } from './useLogin';
  // import { sendMail, verifyMail } from '@/api/sys/mail';
  // import { EmailType } from '@/api/sys/model/mailModel';
  // import { useMessage } from '@/hooks/web/useMessage';
  // import { useDesign } from '@/hooks/web/useDesign';

  // const { prefixCls } = useDesign('login');

  // const FormItem = Form.Item;
  // const { t } = useI18n();
  // const { handleBackLogin, getLoginState } = useLoginState();
  // const { getFormRules } = useFormRules();

  // const formRef = ref();
  // const loading = ref(false);

  // const formData = reactive({
  //   account: '',
  //   email: '',
  //   code: '',
  // });

  // const getShow = computed(() => unref(getLoginState) === LoginStateEnum.RESET_PASSWORD);
  // const { notification, createErrorModal } = useMessage();
  // const { validForm } = useFormValid(formRef);

  import { reactive, ref, unref, computed } from 'vue';
  import LoginFormTitle from './LoginFormTitle.vue';
  import { Form, Input, Button } from 'ant-design-vue';
  import { CountdownInput } from '@/components/CountDown';
  import { useI18n } from '@/hooks/web/useI18n';
  import { useLoginState, useFormRules, useFormValid, LoginStateEnum } from './useLogin';
  import { sendMail, verifyMail } from '@/api/sys/mail';
  import { EmailType } from '@/api/sys/model/mailModel';
  import { useMessage } from '@/hooks/web/useMessage';
  import { useDesign } from '@/hooks/web/useDesign';

  const FormItem = Form.Item;
  const { t } = useI18n();
  const { handleBackLogin, getLoginState } = useLoginState();
  const { getFormRules } = useFormRules(formData);
  const { prefixCls } = useDesign('login');

  const formRef = ref();
  const loading = ref(false);

  const formData = reactive({
    account: '',
    email: '',
    code: '',
  });

  const { validForm } = useFormValid(formRef);

  const getShow = computed(() => unref(getLoginState) === LoginStateEnum.RESET_PASSWORD);

  async function handleReset() {
    const data = await validForm();
    if (!data) return;
    console.log(data);
  }

  // async function handleReset() {
  //   // const form = unref(formRef);
  //   // if (!form) return;
  //   // await form.resetFields();

  //   const data = await validForm();
  //   console.log(data);
  //   return;
  //   if (!data) return;
  //   try {
  //     loading.value = true;
  //     console.log({
  //       email: data.email,
  //       type: EmailType.RESET_PASSWORD,
  //       mode: 'none', //不要默认的错误提示
  //     });
  //     //先执行验证code
  //     const verifyRes = await verifyMail({
  //       email: data.email,
  //       type: EmailType.RESET_PASSWORD,
  //       mode: 'none', //不要默认的错误提示
  //     });

  //     console.log(verifyRes);
  //     return;

  //     if (userInfo) {
  //       notification.success({
  //         message: t('sys.login.loginSuccessTitle'),
  //         description: `${t('sys.login.loginSuccessDesc')}: ${userInfo.nickname}`,
  //         duration: 3,
  //       });
  //     }
  //   } catch (error) {
  //     createErrorModal({
  //       title: t('sys.api.errorTip'),
  //       content: (error as unknown as Error).message || t('sys.api.networkExceptionMsg'),
  //       getContainer: () => document.body.querySelector(`.${prefixCls}`) || document.body,
  //     });
  //   } finally {
  //     loading.value = false;
  //   }
  // }
</script>




<template>
  <div v-if="getShow">
    <LoginFormTitle class="enter-x" />
    <Form class="p-4 enter-x" :model="formData" :rules="getFormRules" ref="formRef">
      <FormItem name="account" class="enter-x">
        <Input
          class="fix-auto-fill"
          size="large"
          v-model:value="formData.account"
          :placeholder="t('sys.login.userName')"
        />
      </FormItem>
      <FormItem name="email" class="enter-x">
        <Input size="large" v-model:value="formData.email" :placeholder="t('sys.login.email')" />
      </FormItem>
      <FormItem name="code" class="enter-x">
        <CountdownInput
          size="large"
          v-model:value="formData.code"
          :placeholder="t('sys.login.emailCode')"
          :send-code-api="sendMail"
          :send-code-params="{
            email: formData.email,
            type: EmailType.RESET_PASSWORD,
          }"
        />
      </FormItem>
      <FormItem name="password" class="enter-x">
        <StrengthMeter
          size="large"
          v-model:value="formData.password"
          :placeholder="t('sys.login.password')"
        />
      </FormItem>
      <FormItem name="confirmPassword" class="enter-x">
        <InputPassword
          size="large"
          visibilityToggle
          v-model:value="formData.confirmPassword"
          :placeholder="t('sys.login.confirmPassword')"
        />
      </FormItem>

      <Button
        type="primary"
        class="enter-x"
        size="large"
        block
        @click="handleReset"
        :loading="loading"
      >
        {{ t('common.resetText') }}
      </Button>
      <Button size="large" block class="mt-4 enter-x" @click="handleBackLogin">
        {{ t('sys.login.backSignIn') }}
      </Button>
    </Form>
  </div>
</template>
<script lang="ts" setup>
  import { reactive, ref, unref, computed } from 'vue';
  import LoginFormTitle from './LoginFormTitle.vue';
  import { Form, Input, Button } from 'ant-design-vue';
  import { StrengthMeter } from '@/components/StrengthMeter';
  import { CountdownInput } from '@/components/CountDown';
  import { useI18n } from '@/hooks/web/useI18n';
  import { useLoginState, useFormRules, useFormValid, LoginStateEnum } from './useLogin';
  import { sendMail, verifyMail } from '@/api/sys/mail';
  import { EmailType } from '@/api/sys/model/mailModel';
  import { useMessage } from '@/hooks/web/useMessage';
  import { useDesign } from '@/hooks/web/useDesign';

  const FormItem = Form.Item;
  const InputPassword = Input.Password;
  const { t } = useI18n();
  const { handleBackLogin, getLoginState } = useLoginState();

  const formRef = ref();
  const loading = ref(false);

  const formData = reactive({
    account: '',
    password: '',
    confirmPassword: '',
    email: '',
    code: '',
  });

  const { getFormRules } = useFormRules(formData);
  console.log(getFormRules);
  const { validForm } = useFormValid(formRef);
  // const { prefixCls } = useDesign('login');
  // const { createErrorModal } = useMessage();
  const getShow = computed(() => unref(getLoginState) === LoginStateEnum.RESET_PASSWORD);

  async function handleReset() {
    const data = await validForm();
    if (!data) return;
    // try {
    //   loading.value = true;
    //   console.log({
    //     email: data.email,
    //     type: EmailType.RESET_PASSWORD,
    //     mode: 'none', //不要默认的错误提示
    //   });
    //   //先执行验证code
    //   const verifyRes = await verifyMail({
    //     email: data.email,
    //     type: EmailType.RESET_PASSWORD,
    //     mode: 'none', //不要默认的错误提示
    //   });
    //   console.log(verifyRes);
    // } catch (error) {
    //   console.error(error);
    //   createErrorModal({
    //     title: t('sys.api.errorTip'),
    //     content: (error as unknown as Error).message || t('sys.api.networkExceptionMsg'),
    //     getContainer: () => document.body.querySelector(`.${prefixCls}`) || document.body,
    //   });
    // } finally {
    //   loading.value = false;
    // }
  }
</script>



import type { FormInstance } from 'ant-design-vue/lib/form/Form';
import type {
  RuleObject,
  NamePath,
  Rule as ValidationRule,
} from 'ant-design-vue/lib/form/interface';
import { ref, computed, unref, Ref } from 'vue';
import { useI18n } from '@/hooks/web/useI18n';

export enum LoginStateEnum {
  LOGIN,
  REGISTER,
  RESET_PASSWORD,
  MOBILE,
  QR_CODE,
}

const currentState = ref(LoginStateEnum.LOGIN);

// 这里也可以优化
// import { createGlobalState } from '@vueuse/core'

export function useLoginState() {
  function setLoginState(state: LoginStateEnum) {
    currentState.value = state;
  }

  const getLoginState = computed(() => currentState.value);

  function handleBackLogin() {
    setLoginState(LoginStateEnum.LOGIN);
  }

  return { setLoginState, getLoginState, handleBackLogin };
}

export function useFormValid<T extends Object = any>(formRef: Ref<FormInstance>) {
  const validate = computed(() => {
    const form = unref(formRef);
    return form?.validate ?? ((_nameList?: NamePath) => Promise.resolve());
  });

  async function validForm() {
    const form = unref(formRef);
    if (!form) return;
    const data = await form.validate();
    return data as T;
  }

  return { validate, validForm };
}

export function useFormRules(formData?: Recordable) {
  const { t } = useI18n();

  const getAccountFormRule = computed(() => createRule(t('sys.login.accountPlaceholder')));
  const getPasswordFormRule = computed(() => createRule(t('sys.login.passwordPlaceholder')));
  const getSmsFormRule = computed(() => createRule(t('sys.login.smsPlaceholder')));
  const getMobileFormRule = computed(() => createRule(t('sys.login.mobilePlaceholder')));
  const getEmailFormRule = computed(() => createRule(t('sys.login.emailPlaceholder')));
  const getEmailCodeFormRule = computed(() => createRule(t('sys.login.emailCodePlaceholder')));

  const validatePolicy = async (_: RuleObject, value: boolean) => {
    return !value ? Promise.reject(t('sys.login.policyPlaceholder')) : Promise.resolve();
  };

  const validateConfirmPassword = (password: string) => {
    return async (_: RuleObject, value: string) => {
      if (!value) {
        return Promise.reject(t('sys.login.passwordPlaceholder'));
      }
      if (value !== password) {
        return Promise.reject(t('sys.login.diffPwd'));
      }
      return Promise.resolve();
    };
  };

  const getFormRules = computed((): { [k: string]: ValidationRule | ValidationRule[] } => {
    const accountFormRule = unref(getAccountFormRule);
    const passwordFormRule = unref(getPasswordFormRule);
    const smsFormRule = unref(getSmsFormRule);
    const mobileFormRule = unref(getMobileFormRule);
    const emailFormRule = unref(getEmailFormRule);
    const emailCodeFormRule = unref(getEmailCodeFormRule);

    const mobileRule = {
      sms: smsFormRule,
      mobile: mobileFormRule,
    };
    switch (unref(currentState)) {
      // register form rules
      case LoginStateEnum.REGISTER:
        return {
          account: accountFormRule,
          password: passwordFormRule,
          confirmPassword: [
            { validator: validateConfirmPassword(formData?.password), trigger: 'change' },
          ],
          policy: [{ validator: validatePolicy, trigger: 'change' }],
          ...mobileRule,
        };

      // reset password form rules
      case LoginStateEnum.RESET_PASSWORD:
        return {
          account: accountFormRule,
          ...mobileRule,
          // email: emailFormRule,
          // code: emailCodeFormRule,
          // password: passwordFormRule,
          // confirmPassword: [
          //   { validator: validateConfirmPassword(formData?.password), trigger: 'change' },
          // ],
        };

      // mobile form rules
      case LoginStateEnum.MOBILE:
        return mobileRule;

      // login form rules
      default:
        return {
          account: accountFormRule,
          password: passwordFormRule,
        };
    }
  });
  return { getFormRules };
}

function createRule(message: string): ValidationRule[] {
  return [
    {
      required: true,
      message,
      trigger: 'change',
    },
  ];
}


