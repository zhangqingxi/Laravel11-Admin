<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\HasOneThrough;
use Illuminate\Database\Eloquent\SoftDeletes;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

/**
 * 用户模型
 *
 * @Auther Qasim
 * @date 2023/6/28
 */
class Admin extends Authenticatable
{
    use HasApiTokens, Notifiable, SoftDeletes;

    protected $connection = 'admin';

    public static function boot(): void
    {

        parent::boot(); // TODO: Change the autogenerated stub

        //当用户被硬删除时，中间表也要删除
        static::deleting(function (Admin $model) {
            // forceDeleting 表示硬删除
            if ($model->forceDeleting) {

                $model->roles()->detach();
            }
        });
    }

    protected $fillable = [
        'account', 'nickname', 'email', 'phone', 'password', 'status', 'login_ip', 'last_login_at', 'login_attempts'
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];

    protected $casts = [
        'last_login_at' => 'datetime',
        'created_at' => 'datetime'
    ];

    /**
     * 管理员角色
     * @return BelongsToMany
     */
    public function roles(): BelongsToMany
    {
        return $this->belongsToMany(Role::class, 'role_admin', 'admin_id', 'role_id');
    }

    /**
     * 头像
     * @return HasOneThrough
     */
    public function avatar(): HasOneThrough
    {
        // related File::class 目标模型
        // through FileAssociation::class 中间模型
        // firstKey model_id 中间模型的外键
        // secondKey id 目标模型的外键
        // localKey id 当前模型上的本地键
        // foreignKey file_id 中间模型上的本地键

        return $this->hasOneThrough(File::class, FileAssociation::class, 'model_id', 'id', 'id', 'file_id')
            ->where('file_associations.model_name', self::class);
    }

    /**
     * 获取用户头像
     * @throws \Exception
     */
    public function getAvatar(): string
    {

        $avatar = '';

        if($file = $this->avatar()->first()){

            $avatar = $file->url;
        }

        return $avatar;
    }

    /**
     * @throws \Exception
     */
    public function getLastLoginAddressAttribute(): string
    {

        if(!$this->last_login_at){

            return '';
        }

        if($this->login_ip === '127.0.0.1'){

            return '内网';
        }

        $ipInfo = ip_address($this->login_ip);

        if($ipInfo){

            return $ipInfo['country']  . '/' . $ipInfo['city'];
        }
        return '';
    }

    /**
     * 日期格式化
     * @param \DateTimeInterface $date
     * @return string
     */
    protected function serializeDate(\DateTimeInterface $date): string
    {
        return $date->format('Y-m-d H:i:s');
    }
}
